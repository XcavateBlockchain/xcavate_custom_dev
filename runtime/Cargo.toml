[package]
name = "parachain-template-runtime"
description = "A parachain runtime template built with Substrate and Cumulus, part of Polkadot Sdk. (polkadot v1.15.0)"
version = "0.1.0"
license = "Unlicense"
authors.workspace = true
homepage.workspace = true
repository.workspace = true
edition.workspace = true
publish = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[build-dependencies]
substrate-wasm-builder = { optional = true, workspace = true, default-features = true }
docify = { workspace = true }

[dependencies]
codec = { features = [
	"derive",
], workspace = true }
hex-literal = { optional = true, workspace = true, default-features = true }
log = { workspace = true }
scale-info = { features = [
	"derive",
], workspace = true }
smallvec = { workspace = true, default-features = true }
docify = { workspace = true }
frame-benchmarking = { optional = true, workspace = true }
frame-executive.workspace = true
frame-metadata-hash-extension.workspace = true
frame-support = { features = ["experimental"], workspace = true }
frame-system.workspace = true
frame-system-benchmarking = { optional = true, workspace = true }
frame-system-rpc-runtime-api.workspace = true
frame-try-runtime = { optional = true, workspace = true }
pallet-aura.workspace = true
pallet-authorship.workspace = true
pallet-balances.workspace = true
pallet-message-queue.workspace = true
pallet-session.workspace = true
pallet-sudo.workspace = true
pallet-timestamp.workspace = true
pallet-transaction-payment.workspace = true
pallet-transaction-payment-rpc-runtime-api.workspace = true

pallet-multisig.workspace = true
pallet-proxy.workspace = true
pallet-utility.workspace = true
pallet-assets.workspace = true
pallet-assets-holder.workspace = true
pallet-assets-freezer.workspace = true
pallet-nfts.workspace = true
pallet-nft-fractionalization.workspace = true
pallet-asset-tx-payment.workspace = true

sp-api.workspace = true
sp-block-builder.workspace = true
sp-consensus-aura.workspace = true
sp-core.workspace = true
sp-genesis-builder.workspace = true
sp-inherents.workspace = true
sp-offchain.workspace = true
sp-runtime.workspace = true
sp-session.workspace = true
sp-transaction-pool.workspace = true
sp-version.workspace = true
pallet-xcm.workspace = true
polkadot-parachain-primitives.workspace = true
polkadot-runtime-common.workspace = true
xcm.workspace = true
xcm-builder.workspace = true
xcm-executor.workspace = true
cumulus-pallet-aura-ext.workspace = true
cumulus-pallet-parachain-system.workspace = true
cumulus-pallet-session-benchmarking.workspace = true
cumulus-pallet-xcm.workspace = true
cumulus-pallet-xcmp-queue.workspace = true
cumulus-primitives-aura.workspace = true
cumulus-primitives-core.workspace = true
cumulus-primitives-utility.workspace = true
cumulus-primitives-storage-weight-reclaim.workspace = true
pallet-collator-selection.workspace = true
parachains-common.workspace = true
parachain-info.workspace = true
primitives = { path = "../primitives", default-features = false }

# Local Dependencies
pallet-marketplace.workspace = true
pallet-xcavate-whitelist.workspace = true
pallet-property-management.workspace = true
pallet-property-governance.workspace = true
pallet-regions.workspace = true
pallet-real-estate-asset.workspace = true

[features]
default = ["std"]
std = [
	"codec/std",
	"cumulus-pallet-aura-ext/std",
	"cumulus-pallet-parachain-system/std",
	"cumulus-pallet-session-benchmarking/std",
	"cumulus-pallet-xcm/std",
	"cumulus-pallet-xcmp-queue/std",
	"cumulus-primitives-aura/std",
	"cumulus-primitives-core/std",
	"cumulus-primitives-storage-weight-reclaim/std",
	"cumulus-primitives-utility/std",
	"frame-benchmarking?/std",
	"frame-executive/std",
	"frame-metadata-hash-extension/std",
	"frame-support/std",
	"frame-system-benchmarking?/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"frame-try-runtime?/std",
	"log/std",
	"pallet-aura/std",
	"pallet-authorship/std",
	"pallet-balances/std",
	"pallet-collator-selection/std",
	"pallet-message-queue/std",
	"pallet-session/std",
	"pallet-sudo/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"pallet-multisig/std",
	"pallet-proxy/std",
	"pallet-utility/std",
	"pallet-assets/std",
	"pallet-assets-holder/std",
	"pallet-assets-freezer/std",
	"pallet-nfts/std",
	"pallet-nft-fractionalization/std",
	"pallet-asset-tx-payment/std",
	"pallet-xcm/std",
	"parachain-info/std",
	"parachains-common/std",
	"polkadot-parachain-primitives/std",
	"polkadot-runtime-common/std",
	"scale-info/std",
	"sp-api/std",
	"sp-block-builder/std",
	"sp-consensus-aura/std",
	"sp-core/std",
	"sp-genesis-builder/std",
	"sp-inherents/std",
	"sp-offchain/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-transaction-pool/std",
	"sp-version/std",
	"substrate-wasm-builder",
	"primitives/std",
	"xcm-builder/std",
	"xcm-executor/std",
	"xcm/std",
	"pallet-marketplace/std",
	"pallet-xcavate-whitelist/std",
	"pallet-property-management/std",
	"pallet-property-governance/std",
	"pallet-regions/std",
	"pallet-real-estate-asset/std",
]

runtime-benchmarks = [
	"cumulus-pallet-parachain-system/runtime-benchmarks",
	"cumulus-pallet-session-benchmarking/runtime-benchmarks",
	"cumulus-pallet-xcmp-queue/runtime-benchmarks",
	"cumulus-primitives-core/runtime-benchmarks",
	"cumulus-primitives-utility/runtime-benchmarks",
	"frame-benchmarking/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"hex-literal",
	"pallet-balances/runtime-benchmarks",
	"pallet-collator-selection/runtime-benchmarks",
	"pallet-message-queue/runtime-benchmarks",
	"pallet-sudo/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"pallet-multisig/runtime-benchmarks",
	"pallet-proxy/runtime-benchmarks",
	"pallet-utility/runtime-benchmarks",
	"pallet-assets/runtime-benchmarks",
	"pallet-nfts/runtime-benchmarks",
	"pallet-nft-fractionalization/runtime-benchmarks",
	"pallet-xcm/runtime-benchmarks",
	"parachains-common/runtime-benchmarks",
	"polkadot-parachain-primitives/runtime-benchmarks",
	"polkadot-runtime-common/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"xcm-builder/runtime-benchmarks",
	"xcm-executor/runtime-benchmarks",
	"pallet-marketplace/runtime-benchmarks",
	"pallet-xcavate-whitelist/runtime-benchmarks",
	"pallet-property-governance/runtime-benchmarks",
	"pallet-property-management/runtime-benchmarks",
	"pallet-regions/runtime-benchmarks",
	#"pallet-real-estate-asset/runtime-benchmarks",
]

try-runtime = [
	"cumulus-pallet-aura-ext/try-runtime",
	"cumulus-pallet-parachain-system/try-runtime",
	"cumulus-pallet-xcm/try-runtime",
	"cumulus-pallet-xcmp-queue/try-runtime",
	"frame-executive/try-runtime",
	"frame-support/try-runtime",
	"frame-system/try-runtime",
	"frame-try-runtime/try-runtime",
	"pallet-aura/try-runtime",
	"pallet-authorship/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-collator-selection/try-runtime",
	"pallet-message-queue/try-runtime",
	"pallet-session/try-runtime",
	"pallet-sudo/try-runtime",
	"pallet-timestamp/try-runtime",
	"pallet-transaction-payment/try-runtime",
	"pallet-multisig/try-runtime",
	"pallet-proxy/try-runtime",
	"pallet-utility/try-runtime",
	"pallet-assets/try-runtime",
	"pallet-assets-holder/try-runtime",
	"pallet-assets-freezer/try-runtime",
	"pallet-nfts/try-runtime",
	"pallet-nft-fractionalization/try-runtime",
	"pallet-asset-tx-payment/try-runtime",
	"pallet-xcm/try-runtime",
	"parachain-info/try-runtime",
	"polkadot-runtime-common/try-runtime",
	"sp-runtime/try-runtime",
	"pallet-marketplace/try-runtime",
	"pallet-xcavate-whitelist/try-runtime",
	"pallet-property-governance/try-runtime",
	"pallet-property-management/try-runtime",
	"pallet-regions/try-runtime",
	"pallet-real-estate-asset/try-runtime",
]

# Enable the metadata hash generation.
#
# This is hidden behind a feature because it increases the compile time.
# The wasm binary needs to be compiled twice, once to fetch the metadata,
# generate the metadata hash and then a second time with the
# `RUNTIME_METADATA_HASH` environment variable set for the `CheckMetadataHash`
# extension.
metadata-hash = ["substrate-wasm-builder/metadata-hash"]

# A convenience feature for enabling things when doing a build
# for an on-chain release.
on-chain-release-build = ["metadata-hash"]
