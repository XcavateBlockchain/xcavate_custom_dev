
//! Autogenerated weights for `pallet_regions`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-07-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `recrafter-Legion-5-16IRX9`, CPU: `Intel(R) Core(TM) i7-14650HX`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --pallet
// pallet_regions
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./pallets/regions/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn propose_new_region() -> Weight;
	fn vote_on_region_proposal() -> Weight;
	fn bid_on_region() -> Weight;
	fn create_new_region() -> Weight;
	fn adjust_listing_duration() -> Weight;
	fn adjust_region_tax() -> Weight;
	fn create_new_location() -> Weight;
	fn propose_remove_regional_operator() -> Weight;
	fn vote_on_remove_owner_proposal() -> Weight;
	fn bid_on_region_replacement() -> Weight;
	fn initiate_region_owner_resignation() -> Weight;
	fn add_regional_operator() -> Weight;
	fn remove_regional_operator() -> Weight;
	fn register_lawyer() -> Weight;
}

/// Weight functions for `pallet_regions`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `XcavateWhitelist::WhitelistedAccounts` (r:1 w:0)
	/// Proof: `XcavateWhitelist::WhitelistedAccounts` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Regions::ProposedRegionIds` (r:1 w:1)
	/// Proof: `Regions::ProposedRegionIds` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:0)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `Regions::LastRegionProposalBlock` (r:1 w:1)
	/// Proof: `Regions::LastRegionProposalBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionProposals` (r:0 w:1)
	/// Proof: `Regions::RegionProposals` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// Storage: `Regions::OngoingRegionProposalVotes` (r:0 w:1)
	/// Proof: `Regions::OngoingRegionProposalVotes` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	fn propose_new_region() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `262`
		//  Estimated: `3658`
		// Minimum execution time: 54_748_000 picoseconds.
		Weight::from_parts(56_406_000, 0)
			.saturating_add(Weight::from_parts(0, 3658))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `XcavateWhitelist::WhitelistedAccounts` (r:1 w:0)
	/// Proof: `XcavateWhitelist::WhitelistedAccounts` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionProposals` (r:1 w:0)
	/// Proof: `Regions::RegionProposals` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Regions::OngoingRegionProposalVotes` (r:1 w:1)
	/// Proof: `Regions::OngoingRegionProposalVotes` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	/// Storage: `Regions::UserRegionVote` (r:1 w:1)
	/// Proof: `Regions::UserRegionVote` (`max_values`: None, `max_size`: Some(83), added: 2558, mode: `MaxEncodedLen`)
	fn vote_on_region_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `3593`
		// Minimum execution time: 28_289_000 picoseconds.
		Weight::from_parts(29_468_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Regions::RegionOperatorAccounts` (r:1 w:0)
	/// Proof: `Regions::RegionOperatorAccounts` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionProposals` (r:1 w:1)
	/// Proof: `Regions::RegionProposals` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// Storage: `Regions::OngoingRegionProposalVotes` (r:1 w:1)
	/// Proof: `Regions::OngoingRegionProposalVotes` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	/// Storage: `Regions::UserRegionVote` (r:1 w:1)
	/// Proof: `Regions::UserRegionVote` (`max_values`: None, `max_size`: Some(83), added: 2558, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionAuctions` (r:0 w:1)
	/// Proof: `Regions::RegionAuctions` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	fn bid_on_region() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `596`
		//  Estimated: `6196`
		// Minimum execution time: 91_175_000 picoseconds.
		Weight::from_parts(93_047_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Regions::RegionAuctions` (r:1 w:0)
	/// Proof: `Regions::RegionAuctions` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::NextCollectionId` (r:1 w:1)
	/// Proof: `Nfts::NextCollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Collection` (r:1 w:1)
	/// Proof: `Nfts::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Regions::ProposedRegionIds` (r:0 w:1)
	/// Proof: `Regions::ProposedRegionIds` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:0 w:1)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionRoleOf` (r:0 w:1)
	/// Proof: `Nfts::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionConfigOf` (r:0 w:1)
	/// Proof: `Nfts::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionAccount` (r:0 w:1)
	/// Proof: `Nfts::CollectionAccount` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn create_new_region() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `287`
		//  Estimated: `3593`
		// Minimum execution time: 46_433_000 picoseconds.
		Weight::from_parts(48_457_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `XcavateWhitelist::WhitelistedAccounts` (r:1 w:0)
	/// Proof: `XcavateWhitelist::WhitelistedAccounts` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:1)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	fn adjust_listing_duration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `3552`
		// Minimum execution time: 17_899_000 picoseconds.
		Weight::from_parts(18_579_000, 0)
			.saturating_add(Weight::from_parts(0, 3552))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `XcavateWhitelist::WhitelistedAccounts` (r:1 w:0)
	/// Proof: `XcavateWhitelist::WhitelistedAccounts` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:1)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	fn adjust_region_tax() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `3552`
		// Minimum execution time: 17_898_000 picoseconds.
		Weight::from_parts(18_460_000, 0)
			.saturating_add(Weight::from_parts(0, 3552))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Regions::LocationRegistration` (r:1 w:1)
	/// Proof: `Regions::LocationRegistration` (`max_values`: None, `max_size`: Some(46), added: 2521, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:1)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	fn create_new_location() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `393`
		//  Estimated: `3658`
		// Minimum execution time: 54_391_000 picoseconds.
		Weight::from_parts(56_291_000, 0)
			.saturating_add(Weight::from_parts(0, 3658))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `XcavateWhitelist::WhitelistedAccounts` (r:1 w:0)
	/// Proof: `XcavateWhitelist::WhitelistedAccounts` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:0)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionOwnerProposals` (r:1 w:1)
	/// Proof: `Regions::RegionOwnerProposals` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionOwnerRoundsExpiring` (r:1 w:1)
	/// Proof: `Regions::RegionOwnerRoundsExpiring` (`max_values`: None, `max_size`: Some(222), added: 2697, mode: `MaxEncodedLen`)
	/// Storage: `Regions::OngoingRegionOwnerProposalVotes` (r:0 w:1)
	/// Proof: `Regions::OngoingRegionOwnerProposalVotes` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	fn propose_remove_regional_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `508`
		//  Estimated: `3687`
		// Minimum execution time: 63_097_000 picoseconds.
		Weight::from_parts(64_857_000, 0)
			.saturating_add(Weight::from_parts(0, 3687))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `XcavateWhitelist::WhitelistedAccounts` (r:1 w:0)
	/// Proof: `XcavateWhitelist::WhitelistedAccounts` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Regions::OngoingRegionOwnerProposalVotes` (r:1 w:1)
	/// Proof: `Regions::OngoingRegionOwnerProposalVotes` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	/// Storage: `Regions::UserRegionOwnerVote` (r:1 w:1)
	/// Proof: `Regions::UserRegionOwnerVote` (`max_values`: None, `max_size`: Some(83), added: 2558, mode: `MaxEncodedLen`)
	fn vote_on_remove_owner_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `591`
		//  Estimated: `3593`
		// Minimum execution time: 28_450_000 picoseconds.
		Weight::from_parts(29_305_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Regions::RegionOperatorAccounts` (r:1 w:0)
	/// Proof: `Regions::RegionOperatorAccounts` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:0)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionReplacementAuctions` (r:1 w:1)
	/// Proof: `Regions::RegionReplacementAuctions` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	/// Storage: `Regions::ReplacementAuctionExpiring` (r:1 w:1)
	/// Proof: `Regions::ReplacementAuctionExpiring` (`max_values`: None, `max_size`: Some(222), added: 2697, mode: `MaxEncodedLen`)
	fn bid_on_region_replacement() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `501`
		//  Estimated: `3687`
		// Minimum execution time: 58_344_000 picoseconds.
		Weight::from_parts(60_171_000, 0)
			.saturating_add(Weight::from_parts(0, 3687))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Regions::RegionDetails` (r:1 w:1)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	fn initiate_region_owner_resignation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `198`
		//  Estimated: `3552`
		// Minimum execution time: 11_068_000 picoseconds.
		Weight::from_parts(11_670_000, 0)
			.saturating_add(Weight::from_parts(0, 3552))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Regions::RegionOperatorAccounts` (r:1 w:1)
	/// Proof: `Regions::RegionOperatorAccounts` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn add_regional_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3513`
		// Minimum execution time: 8_400_000 picoseconds.
		Weight::from_parts(8_928_000, 0)
			.saturating_add(Weight::from_parts(0, 3513))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Regions::RegionOperatorAccounts` (r:1 w:1)
	/// Proof: `Regions::RegionOperatorAccounts` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn remove_regional_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `78`
		//  Estimated: `3513`
		// Minimum execution time: 9_428_000 picoseconds.
		Weight::from_parts(9_645_000, 0)
			.saturating_add(Weight::from_parts(0, 3513))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Regions::RegionDetails` (r:1 w:0)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RealEstateLawyer` (r:1 w:1)
	/// Proof: `Regions::RealEstateLawyer` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	fn register_lawyer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `198`
		//  Estimated: `3552`
		// Minimum execution time: 13_504_000 picoseconds.
		Weight::from_parts(14_200_000, 0)
			.saturating_add(Weight::from_parts(0, 3552))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
