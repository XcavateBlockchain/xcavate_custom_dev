
//! Autogenerated weights for `pallet_regions`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-08-21, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `recrafter-Legion-5-16IRX9`, CPU: `Intel(R) Core(TM) i7-14650HX`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --pallet
// pallet_regions
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./pallets/regions/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn propose_new_region() -> Weight;
	fn vote_on_region_proposal() -> Weight;
	fn unlock_region_voting_token() -> Weight;
	fn bid_on_region() -> Weight;
	fn create_new_region() -> Weight;
	fn adjust_listing_duration() -> Weight;
	fn adjust_region_tax() -> Weight;
	fn create_new_location() -> Weight;
	fn propose_remove_regional_operator() -> Weight;
	fn vote_on_remove_owner_proposal() -> Weight;
	fn bid_on_region_replacement() -> Weight;
	fn initiate_region_owner_resignation() -> Weight;
	fn register_lawyer() -> Weight;
}

/// Weight functions for `pallet_regions`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::ProposedRegionIds` (r:1 w:1)
	/// Proof: `Regions::ProposedRegionIds` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:0)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `Regions::ProposalCounter` (r:1 w:1)
	/// Proof: `Regions::ProposalCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Regions::LastRegionProposalBlock` (r:1 w:1)
	/// Proof: `Regions::LastRegionProposalBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionProposals` (r:0 w:1)
	/// Proof: `Regions::RegionProposals` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Regions::OngoingRegionProposalVotes` (r:0 w:1)
	/// Proof: `Regions::OngoingRegionProposalVotes` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionProposalId` (r:0 w:1)
	/// Proof: `Regions::RegionProposalId` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	fn propose_new_region() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `3712`
		// Minimum execution time: 61_532_000 picoseconds.
		Weight::from_parts(63_332_000, 0)
			.saturating_add(Weight::from_parts(0, 3712))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionProposalId` (r:1 w:0)
	/// Proof: `Regions::RegionProposalId` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionProposals` (r:1 w:0)
	/// Proof: `Regions::RegionProposals` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Regions::OngoingRegionProposalVotes` (r:1 w:1)
	/// Proof: `Regions::OngoingRegionProposalVotes` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Regions::UserRegionVote` (r:1 w:1)
	/// Proof: `Regions::UserRegionVote` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	fn vote_on_region_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `837`
		//  Estimated: `3712`
		// Minimum execution time: 94_650_000 picoseconds.
		Weight::from_parts(96_076_000, 0)
			.saturating_add(Weight::from_parts(0, 3712))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Regions::UserRegionVote` (r:1 w:1)
	/// Proof: `Regions::UserRegionVote` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionProposals` (r:1 w:0)
	/// Proof: `Regions::RegionProposals` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn unlock_region_voting_token() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `525`
		//  Estimated: `3712`
		// Minimum execution time: 47_662_000 picoseconds.
		Weight::from_parts(49_064_000, 0)
			.saturating_add(Weight::from_parts(0, 3712))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionProposalId` (r:1 w:1)
	/// Proof: `Regions::RegionProposalId` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionProposals` (r:1 w:1)
	/// Proof: `Regions::RegionProposals` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Regions::OngoingRegionProposalVotes` (r:1 w:1)
	/// Proof: `Regions::OngoingRegionProposalVotes` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionAuctions` (r:0 w:1)
	/// Proof: `Regions::RegionAuctions` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	fn bid_on_region() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3473`
		//  Estimated: `6196`
		// Minimum execution time: 130_756_000 picoseconds.
		Weight::from_parts(143_257_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionAuctions` (r:1 w:0)
	/// Proof: `Regions::RegionAuctions` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::NextCollectionId` (r:1 w:1)
	/// Proof: `Nfts::NextCollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Collection` (r:1 w:1)
	/// Proof: `Nfts::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Regions::ProposedRegionIds` (r:0 w:1)
	/// Proof: `Regions::ProposedRegionIds` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:0 w:1)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionRoleOf` (r:0 w:1)
	/// Proof: `Nfts::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionConfigOf` (r:0 w:1)
	/// Proof: `Nfts::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionAccount` (r:0 w:1)
	/// Proof: `Nfts::CollectionAccount` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn create_new_region() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `511`
		//  Estimated: `3593`
		// Minimum execution time: 55_825_000 picoseconds.
		Weight::from_parts(57_984_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:1)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	fn adjust_listing_duration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `422`
		//  Estimated: `3552`
		// Minimum execution time: 20_210_000 picoseconds.
		Weight::from_parts(21_238_000, 0)
			.saturating_add(Weight::from_parts(0, 3552))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:1)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	fn adjust_region_tax() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `422`
		//  Estimated: `3552`
		// Minimum execution time: 20_414_000 picoseconds.
		Weight::from_parts(21_074_000, 0)
			.saturating_add(Weight::from_parts(0, 3552))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::LocationRegistration` (r:1 w:1)
	/// Proof: `Regions::LocationRegistration` (`max_values`: None, `max_size`: Some(46), added: 2521, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:1)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn create_new_location() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `637`
		//  Estimated: `3712`
		// Minimum execution time: 64_037_000 picoseconds.
		Weight::from_parts(66_502_000, 0)
			.saturating_add(Weight::from_parts(0, 3712))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:0)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionOwnerProposalId` (r:1 w:1)
	/// Proof: `Regions::RegionOwnerProposalId` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Regions::ProposalCounter` (r:1 w:1)
	/// Proof: `Regions::ProposalCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionOwnerRoundsExpiring` (r:1 w:1)
	/// Proof: `Regions::RegionOwnerRoundsExpiring` (`max_values`: None, `max_size`: Some(222), added: 2697, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionOwnerProposals` (r:0 w:1)
	/// Proof: `Regions::RegionOwnerProposals` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
	/// Storage: `Regions::OngoingRegionOwnerProposalVotes` (r:0 w:1)
	/// Proof: `Regions::OngoingRegionOwnerProposalVotes` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn propose_remove_regional_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `846`
		//  Estimated: `3712`
		// Minimum execution time: 71_293_000 picoseconds.
		Weight::from_parts(73_583_000, 0)
			.saturating_add(Weight::from_parts(0, 3712))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionOwnerProposalId` (r:1 w:0)
	/// Proof: `Regions::RegionOwnerProposalId` (`max_values`: None, `max_size`: Some(26), added: 2501, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Regions::OngoingRegionOwnerProposalVotes` (r:1 w:1)
	/// Proof: `Regions::OngoingRegionOwnerProposalVotes` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Regions::UserRegionOwnerVote` (r:1 w:1)
	/// Proof: `Regions::UserRegionOwnerVote` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	fn vote_on_remove_owner_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `935`
		//  Estimated: `3712`
		// Minimum execution time: 93_148_000 picoseconds.
		Weight::from_parts(94_871_000, 0)
			.saturating_add(Weight::from_parts(0, 3712))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:0)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionReplacementAuctions` (r:1 w:1)
	/// Proof: `Regions::RegionReplacementAuctions` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn bid_on_region_replacement() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `936`
		//  Estimated: `6434`
		// Minimum execution time: 91_715_000 picoseconds.
		Weight::from_parts(94_829_000, 0)
			.saturating_add(Weight::from_parts(0, 6434))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:1)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	fn initiate_region_owner_resignation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `422`
		//  Estimated: `3552`
		// Minimum execution time: 20_427_000 picoseconds.
		Weight::from_parts(21_583_000, 0)
			.saturating_add(Weight::from_parts(0, 3552))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:0)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RealEstateLawyer` (r:1 w:1)
	/// Proof: `Regions::RealEstateLawyer` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn register_lawyer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `602`
		//  Estimated: `3712`
		// Minimum execution time: 61_963_000 picoseconds.
		Weight::from_parts(62_803_000, 0)
			.saturating_add(Weight::from_parts(0, 3712))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
