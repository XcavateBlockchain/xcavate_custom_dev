
//! Autogenerated weights for `pallet_property_management`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-09-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `recrafter-Legion-5-16IRX9`, CPU: `Intel(R) Core(TM) i7-14650HX`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --pallet
// pallet_property_management
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./pallets/property-management/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn add_letting_agent() -> Weight;
	fn remove_letting_agent() -> Weight;
	fn letting_agent_propose() -> Weight;
	fn vote_on_letting_agent() -> Weight;
	fn finalize_letting_agent() -> Weight;
	fn unfreeze_letting_voting_token() -> Weight;
	fn distribute_income() -> Weight;
	fn claim_income() -> Weight;
}

/// Weight functions for `pallet_property_management`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:0)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `Regions::LocationRegistration` (r:1 w:0)
	/// Proof: `Regions::LocationRegistration` (`max_values`: None, `max_size`: Some(46), added: 2521, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::LettingInfo` (r:1 w:1)
	/// Proof: `PropertyManagement::LettingInfo` (`max_values`: None, `max_size`: Some(6603), added: 9078, mode: `MaxEncodedLen`)
	fn add_letting_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `709`
		//  Estimated: `10068`
		// Minimum execution time: 114_425_000 picoseconds.
		Weight::from_parts(117_746_000, 0)
			.saturating_add(Weight::from_parts(0, 10068))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::LettingInfo` (r:1 w:1)
	/// Proof: `PropertyManagement::LettingInfo` (`max_values`: None, `max_size`: Some(6603), added: 9078, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn remove_letting_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `594`
		//  Estimated: `10068`
		// Minimum execution time: 92_282_000 picoseconds.
		Weight::from_parts(98_294_000, 0)
			.saturating_add(Weight::from_parts(0, 10068))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyAssetInfo` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyAssetInfo` (`max_values`: None, `max_size`: Some(63), added: 2538, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::LettingInfo` (r:1 w:0)
	/// Proof: `PropertyManagement::LettingInfo` (`max_values`: None, `max_size`: Some(6603), added: 9078, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::LettingStorage` (r:1 w:0)
	/// Proof: `PropertyManagement::LettingStorage` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::AssetLettingProposal` (r:1 w:1)
	/// Proof: `PropertyManagement::AssetLettingProposal` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::ProposalCounter` (r:1 w:1)
	/// Proof: `PropertyManagement::ProposalCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::OngoingLettingAgentVoting` (r:0 w:1)
	/// Proof: `PropertyManagement::OngoingLettingAgentVoting` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::LettingAgentProposal` (r:0 w:1)
	/// Proof: `PropertyManagement::LettingAgentProposal` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	fn letting_agent_propose() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1410`
		//  Estimated: `10068`
		// Minimum execution time: 124_247_000 picoseconds.
		Weight::from_parts(132_293_000, 0)
			.saturating_add(Weight::from_parts(0, 10068))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::AssetLettingProposal` (r:1 w:0)
	/// Proof: `PropertyManagement::AssetLettingProposal` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::LettingAgentProposal` (r:1 w:0)
	/// Proof: `PropertyManagement::LettingAgentProposal` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyOwnerToken` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyOwnerToken` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::OngoingLettingAgentVoting` (r:1 w:1)
	/// Proof: `PropertyManagement::OngoingLettingAgentVoting` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::UserLettingAgentVote` (r:1 w:1)
	/// Proof: `PropertyManagement::UserLettingAgentVote` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `AssetsFreezer::Freezes` (r:1 w:1)
	/// Proof: `AssetsFreezer::Freezes` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAssets::Account` (r:1 w:0)
	/// Proof: `RealEstateAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `AssetsFreezer::FrozenBalances` (r:1 w:1)
	/// Proof: `AssetsFreezer::FrozenBalances` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	fn vote_on_letting_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6495`
		//  Estimated: `3602`
		// Minimum execution time: 210_048_000 picoseconds.
		Weight::from_parts(251_087_000, 0)
			.saturating_add(Weight::from_parts(0, 3602))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::AssetLettingProposal` (r:1 w:1)
	/// Proof: `PropertyManagement::AssetLettingProposal` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::LettingAgentProposal` (r:1 w:1)
	/// Proof: `PropertyManagement::LettingAgentProposal` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::OngoingLettingAgentVoting` (r:1 w:1)
	/// Proof: `PropertyManagement::OngoingLettingAgentVoting` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyAssetInfo` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyAssetInfo` (`max_values`: None, `max_size`: Some(63), added: 2538, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::LettingStorage` (r:1 w:1)
	/// Proof: `PropertyManagement::LettingStorage` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::LettingInfo` (r:1 w:1)
	/// Proof: `PropertyManagement::LettingInfo` (`max_values`: None, `max_size`: Some(6603), added: 9078, mode: `MaxEncodedLen`)
	fn finalize_letting_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2248`
		//  Estimated: `10068`
		// Minimum execution time: 146_175_000 picoseconds.
		Weight::from_parts(164_599_000, 0)
			.saturating_add(Weight::from_parts(0, 10068))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `PropertyManagement::UserLettingAgentVote` (r:1 w:1)
	/// Proof: `PropertyManagement::UserLettingAgentVote` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::LettingAgentProposal` (r:1 w:0)
	/// Proof: `PropertyManagement::LettingAgentProposal` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	/// Storage: `AssetsFreezer::Freezes` (r:1 w:1)
	/// Proof: `AssetsFreezer::Freezes` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAssets::Account` (r:1 w:0)
	/// Proof: `RealEstateAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `AssetsFreezer::FrozenBalances` (r:1 w:1)
	/// Proof: `AssetsFreezer::FrozenBalances` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	fn unfreeze_letting_voting_token() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4178`
		//  Estimated: `3602`
		// Minimum execution time: 132_604_000 picoseconds.
		Weight::from_parts(155_526_000, 0)
			.saturating_add(Weight::from_parts(0, 3602))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::LettingStorage` (r:1 w:0)
	/// Proof: `PropertyManagement::LettingStorage` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyOwner` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyOwner` (`max_values`: None, `max_size`: Some(8022), added: 10497, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyAssetInfo` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyAssetInfo` (`max_values`: None, `max_size`: Some(63), added: 2538, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `AssetsHolder::BalancesOnHold` (r:1 w:0)
	/// Proof: `AssetsHolder::BalancesOnHold` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyOwnerToken` (r:250 w:0)
	/// Proof: `RealEstateAsset::PropertyOwnerToken` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::InvestorFunds` (r:250 w:250)
	/// Proof: `PropertyManagement::InvestorFunds` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn distribute_income() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `25977`
		//  Estimated: `645740`
		// Minimum execution time: 3_468_232_000 picoseconds.
		Weight::from_parts(3_845_561_000, 0)
			.saturating_add(Weight::from_parts(0, 645740))
			.saturating_add(T::DbWeight::get().reads(509))
			.saturating_add(T::DbWeight::get().writes(254))
	}
	/// Storage: `XcavateWhitelist::AccountRoles` (r:1 w:0)
	/// Proof: `XcavateWhitelist::AccountRoles` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::InvestorFunds` (r:1 w:1)
	/// Proof: `PropertyManagement::InvestorFunds` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `AssetsHolder::BalancesOnHold` (r:1 w:0)
	/// Proof: `AssetsHolder::BalancesOnHold` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	fn claim_income() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4044`
		//  Estimated: `6208`
		// Minimum execution time: 174_392_000 picoseconds.
		Weight::from_parts(220_350_000, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}
