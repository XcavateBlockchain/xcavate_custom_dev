
//! Autogenerated weights for `pallet_property_governance`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-07-31, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `recrafter-Legion-5-16IRX9`, CPU: `Intel(R) Core(TM) i7-14650HX`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --pallet
// pallet_property_governance
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./pallets/property-governance/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn propose() -> Weight;
	fn challenge_against_letting_agent() -> Weight;
	fn vote_on_proposal() -> Weight;
	fn vote_on_letting_agent_challenge() -> Weight;
	fn propose_property_sale() -> Weight;
	fn vote_on_property_sale() -> Weight;
	fn bid_on_sale() -> Weight;
	fn lawyer_claim_sale() -> Weight;
	fn lawyer_confirm_sale() -> Weight;
	fn finalize_sale() -> Weight;
	fn claim_sale_funds() -> Weight;
}

/// Weight functions for `pallet_property_governance`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `PropertyManagement::LettingStorage` (r:1 w:0)
	/// Proof: `PropertyManagement::LettingStorage` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::ProposalCount` (r:1 w:1)
	/// Proof: `PropertyGovernance::ProposalCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::ProposalRoundsExpiring` (r:1 w:1)
	/// Proof: `PropertyGovernance::ProposalRoundsExpiring` (`max_values`: None, `max_size`: Some(422), added: 2897, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::OngoingProposalVotes` (r:0 w:1)
	/// Proof: `PropertyGovernance::OngoingProposalVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::Proposals` (r:0 w:1)
	/// Proof: `PropertyGovernance::Proposals` (`max_values`: None, `max_size`: Some(127), added: 2602, mode: `MaxEncodedLen`)
	fn propose() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `642`
		//  Estimated: `3887`
		// Minimum execution time: 40_310_000 picoseconds.
		Weight::from_parts(45_868_000, 0)
			.saturating_add(Weight::from_parts(0, 3887))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `RealEstateAsset::PropertyOwner` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyOwner` (`max_values`: None, `max_size`: Some(8022), added: 10497, mode: `MaxEncodedLen`)
	/// Storage: `PropertyManagement::LettingStorage` (r:1 w:0)
	/// Proof: `PropertyManagement::LettingStorage` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::Challenges` (r:1 w:1)
	/// Proof: `PropertyGovernance::Challenges` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::ChallengeRoundsExpiring` (r:1 w:1)
	/// Proof: `PropertyGovernance::ChallengeRoundsExpiring` (`max_values`: None, `max_size`: Some(422), added: 2897, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::OngoingChallengeVotes` (r:0 w:1)
	/// Proof: `PropertyGovernance::OngoingChallengeVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	fn challenge_against_letting_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8796`
		//  Estimated: `11487`
		// Minimum execution time: 49_398_000 picoseconds.
		Weight::from_parts(54_763_000, 0)
			.saturating_add(Weight::from_parts(0, 11487))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `PropertyGovernance::Proposals` (r:1 w:0)
	/// Proof: `PropertyGovernance::Proposals` (`max_values`: None, `max_size`: Some(127), added: 2602, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyOwner` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyOwner` (`max_values`: None, `max_size`: Some(8022), added: 10497, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyOwnerToken` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyOwnerToken` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::OngoingProposalVotes` (r:1 w:1)
	/// Proof: `PropertyGovernance::OngoingProposalVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::UserProposalVote` (r:1 w:1)
	/// Proof: `PropertyGovernance::UserProposalVote` (`max_values`: None, `max_size`: Some(8272), added: 10747, mode: `MaxEncodedLen`)
	fn vote_on_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `9428`
		//  Estimated: `11737`
		// Minimum execution time: 53_877_000 picoseconds.
		Weight::from_parts(63_943_000, 0)
			.saturating_add(Weight::from_parts(0, 11737))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `PropertyGovernance::Challenges` (r:1 w:0)
	/// Proof: `PropertyGovernance::Challenges` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyOwner` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyOwner` (`max_values`: None, `max_size`: Some(8022), added: 10497, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyOwnerToken` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyOwnerToken` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::OngoingChallengeVotes` (r:1 w:1)
	/// Proof: `PropertyGovernance::OngoingChallengeVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::UserChallengeVote` (r:1 w:1)
	/// Proof: `PropertyGovernance::UserChallengeVote` (`max_values`: None, `max_size`: Some(8272), added: 10747, mode: `MaxEncodedLen`)
	fn vote_on_letting_agent_challenge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `9375`
		//  Estimated: `11737`
		// Minimum execution time: 52_827_000 picoseconds.
		Weight::from_parts(59_696_000, 0)
			.saturating_add(Weight::from_parts(0, 11737))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `RealEstateAsset::PropertyAssetInfo` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyAssetInfo` (`max_values`: None, `max_size`: Some(62), added: 2537, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::PropertySale` (r:1 w:0)
	/// Proof: `PropertyGovernance::PropertySale` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::SaleProposals` (r:1 w:1)
	/// Proof: `PropertyGovernance::SaleProposals` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyOwner` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyOwner` (`max_values`: None, `max_size`: Some(8022), added: 10497, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::SaleProposalRoundsExpiring` (r:1 w:1)
	/// Proof: `PropertyGovernance::SaleProposalRoundsExpiring` (`max_values`: None, `max_size`: Some(422), added: 2897, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::OngoingSaleProposalVotes` (r:0 w:1)
	/// Proof: `PropertyGovernance::OngoingSaleProposalVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	fn propose_property_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8310`
		//  Estimated: `11487`
		// Minimum execution time: 47_757_000 picoseconds.
		Weight::from_parts(54_281_000, 0)
			.saturating_add(Weight::from_parts(0, 11487))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `PropertyGovernance::SaleProposals` (r:1 w:0)
	/// Proof: `PropertyGovernance::SaleProposals` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyOwner` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyOwner` (`max_values`: None, `max_size`: Some(8022), added: 10497, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyOwnerToken` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyOwnerToken` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::OngoingSaleProposalVotes` (r:1 w:1)
	/// Proof: `PropertyGovernance::OngoingSaleProposalVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::UserSaleProposalVote` (r:1 w:1)
	/// Proof: `PropertyGovernance::UserSaleProposalVote` (`max_values`: None, `max_size`: Some(8272), added: 10747, mode: `MaxEncodedLen`)
	fn vote_on_property_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `9375`
		//  Estimated: `11737`
		// Minimum execution time: 51_988_000 picoseconds.
		Weight::from_parts(60_987_000, 0)
			.saturating_add(Weight::from_parts(0, 11737))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `XcavateWhitelist::WhitelistedAccounts` (r:1 w:0)
	/// Proof: `XcavateWhitelist::WhitelistedAccounts` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `AssetsHolder::BalancesOnHold` (r:2 w:2)
	/// Proof: `AssetsHolder::BalancesOnHold` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `AssetsHolder::Holds` (r:2 w:2)
	/// Proof: `AssetsHolder::Holds` (`max_values`: None, `max_size`: Some(103), added: 2578, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::SaleAuctions` (r:1 w:1)
	/// Proof: `PropertyGovernance::SaleAuctions` (`max_values`: None, `max_size`: Some(90), added: 2565, mode: `MaxEncodedLen`)
	fn bid_on_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3195`
		//  Estimated: `6208`
		// Minimum execution time: 119_586_000 picoseconds.
		Weight::from_parts(124_027_000, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `Regions::RealEstateLawyer` (r:1 w:0)
	/// Proof: `Regions::RealEstateLawyer` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyAssetInfo` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyAssetInfo` (`max_values`: None, `max_size`: Some(62), added: 2537, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::PropertySale` (r:1 w:1)
	/// Proof: `PropertyGovernance::PropertySale` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	fn lawyer_claim_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `716`
		//  Estimated: `3663`
		// Minimum execution time: 35_586_000 picoseconds.
		Weight::from_parts(38_521_000, 0)
			.saturating_add(Weight::from_parts(0, 3663))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `PropertyGovernance::PropertySale` (r:1 w:1)
	/// Proof: `PropertyGovernance::PropertySale` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `AssetsHolder::Holds` (r:1 w:1)
	/// Proof: `AssetsHolder::Holds` (`max_values`: None, `max_size`: Some(103), added: 2578, mode: `MaxEncodedLen`)
	/// Storage: `AssetsHolder::BalancesOnHold` (r:1 w:1)
	/// Proof: `AssetsHolder::BalancesOnHold` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	fn lawyer_confirm_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1962`
		//  Estimated: `3675`
		// Minimum execution time: 70_687_000 picoseconds.
		Weight::from_parts(73_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3675))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `PropertyGovernance::PropertySale` (r:1 w:1)
	/// Proof: `PropertyGovernance::PropertySale` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyAssetInfo` (r:1 w:0)
	/// Proof: `RealEstateAsset::PropertyAssetInfo` (`max_values`: None, `max_size`: Some(62), added: 2537, mode: `MaxEncodedLen`)
	/// Storage: `Regions::RegionDetails` (r:1 w:0)
	/// Proof: `Regions::RegionDetails` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:6 w:6)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `AssetsHolder::Holds` (r:1 w:1)
	/// Proof: `AssetsHolder::Holds` (`max_values`: None, `max_size`: Some(103), added: 2578, mode: `MaxEncodedLen`)
	/// Storage: `AssetsHolder::BalancesOnHold` (r:2 w:1)
	/// Proof: `AssetsHolder::BalancesOnHold` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::PropertySaleFunds` (r:0 w:1)
	/// Proof: `PropertyGovernance::PropertySaleFunds` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn finalize_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4520`
		//  Estimated: `16644`
		// Minimum execution time: 266_730_000 picoseconds.
		Weight::from_parts(274_806_000, 0)
			.saturating_add(Weight::from_parts(0, 16644))
			.saturating_add(T::DbWeight::get().reads(14))
			.saturating_add(T::DbWeight::get().writes(12))
	}
	/// Storage: `PropertyGovernance::PropertySale` (r:1 w:1)
	/// Proof: `PropertyGovernance::PropertySale` (`max_values`: None, `max_size`: Some(198), added: 2673, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::PropertySaleFunds` (r:2 w:0)
	/// Proof: `PropertyGovernance::PropertySaleFunds` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyAssetInfo` (r:1 w:1)
	/// Proof: `RealEstateAsset::PropertyAssetInfo` (`max_values`: None, `max_size`: Some(62), added: 2537, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyOwnerToken` (r:1 w:1)
	/// Proof: `RealEstateAsset::PropertyOwnerToken` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAssets::Asset` (r:1 w:1)
	/// Proof: `RealEstateAssets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAssets::Account` (r:2 w:2)
	/// Proof: `RealEstateAssets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:3 w:3)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `NftFractionalization::NftToAsset` (r:1 w:1)
	/// Proof: `NftFractionalization::NftToAsset` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Attribute` (r:1 w:1)
	/// Proof: `Nfts::Attribute` (`max_values`: None, `max_size`: Some(446), added: 2921, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Collection` (r:1 w:1)
	/// Proof: `Nfts::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nfts::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nfts::ItemConfigOf` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Item` (r:1 w:1)
	/// Proof: `Nfts::Item` (`max_values`: None, `max_size`: Some(861), added: 3336, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::ItemMetadataOf` (r:1 w:1)
	/// Proof: `Nfts::ItemMetadataOf` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `RealEstateAsset::PropertyOwner` (r:0 w:1)
	/// Proof: `RealEstateAsset::PropertyOwner` (`max_values`: None, `max_size`: Some(8022), added: 10497, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Account` (r:0 w:1)
	/// Proof: `Nfts::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::ItemPriceOf` (r:0 w:1)
	/// Proof: `Nfts::ItemPriceOf` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::ItemAttributesApprovalsOf` (r:0 w:1)
	/// Proof: `Nfts::ItemAttributesApprovalsOf` (`max_values`: None, `max_size`: Some(681), added: 3156, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::PendingSwapOf` (r:0 w:1)
	/// Proof: `Nfts::PendingSwapOf` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	fn claim_sale_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3291`
		//  Estimated: `8799`
		// Minimum execution time: 305_251_000 picoseconds.
		Weight::from_parts(345_743_000, 0)
			.saturating_add(Weight::from_parts(0, 8799))
			.saturating_add(T::DbWeight::get().reads(19))
			.saturating_add(T::DbWeight::get().writes(21))
	}
}
